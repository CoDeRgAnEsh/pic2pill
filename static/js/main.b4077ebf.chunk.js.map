{"version":3,"sources":["components/AlertDismissable.js","pages/About.js","components/LoadButton.js","model/classes.js","config.js","pages/Classify.js","pages/NotFound.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["AlertDismissable","this","props","show","Alert","variant","onClose","dismissible","title","dangerouslySetInnerHTML","__html","message","Component","Home","className","isLoading","text","loadingText","disabled","Button","Spinner","as","animation","size","role","aria-hidden","MODEL_CLASSES","0","1","2","3","4","API_ENDPOINT","MODEL_PATH","IMAGE_SIZE","CANVAS_SIZE","TOPK_PREDICTIONS","INDEXEDDB_KEY","Classify","initWebcam","a","async","tf","webcam","refs","resizeWidth","resizeHeight","facingMode","noWebcam","style","display","startWebcam","start","stopWebcam","stop","getModelInfo","fetch","config","method","then","response","json","data","modelLastUpdated","last_updated","catch","err","console","log","updateModel","setState","isDownloadingModel","model","save","modelUpdateAvailable","showModelUpdateAlert","showModelUpdateSuccess","classifyLocalImage","isClassifying","croppedCanvas","cropper","getCroppedCanvas","image","fromPixels","toFloat","processImage","imageData","resizedImage","resizeBilinear","logits","predict","probabilities","getTopKClasses","preds","predictions","photoSettingsOpen","state","context","canvas","getContext","ratioX","width","ratioY","height","ratio","Math","min","clearRect","drawImage","dispose","classifyWebcamImage","capture","imageCapture","resized","tensorData","div","toPixels","expandDims","sub","values","topK","valuesAndIndices","i","length","push","value","index","sort","b","topkValues","Float32Array","topkIndices","Int32Array","topClassesAndProbs","probability","toFixed","handlePanelClick","event","handleFileChange","target","files","file","URL","createObjectURL","filename","name","handleTabSelect","activeKey","modelLoaded","isModelLoading","window","openDB","db","transaction","objectStore","get","item","dateSaved","Date","modelArtifactsInfo","getTime","warn","e","onClick","aria-controls","aria-expanded","Collapse","in","id","Container","modelType","Tabs","defaultActiveKey","onSelect","Tab","eventKey","ref","autoPlay","playsInline","muted","LoadButton","Form","Group","controlId","Label","Control","onChange","type","accept","src","guides","aspectRatio","viewMode","ListGroup","map","category","Item","key","href","childProps","path","exact","component","About","NotFound","App","dismissUpdateAlert","showUpdateAlert","reloadMsg","Navbar","collapseOnSelect","expand","Brand","Toggle","Nav","to","updateAvailable","paddingTop","Routes","withRouter","isLocalhost","Boolean","location","hostname","match","register","navigator","process","origin","addEventListener","swUrl","contentType","headers","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","newerSwAvailable","sw","onUpdate","waiting","active","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","error","Index","contentCached","handleUpdate","waitingServiceWorker","postMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4077ebf.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\n\n/**\n * Class to handle the rendering of a dismissiable alert to use for things like errors.\n * @extends React.Component\n */\nclass AlertDismissable extends Component {\n\n  render() {\n    if (this.props.show) {\n      return (\n        <Alert variant={this.props.variant || 'danger'} onClose={this.props.onClose} dismissible>\n          { this.props.title && <h5><strong>{this.props.title}</strong></h5> }\n          <div dangerouslySetInnerHTML={{ __html: this.props.message }} />\n        </Alert>\n      );\n    }\n    return null;\n  }\n}\n\nexport default AlertDismissable;\n","import React, { Component } from 'react';\nimport './About.css';\n\n/**\n * Class to handle the rendering of the Home page.\n * @extends React.Component\n */\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"About container\">\n        <h1>About</h1>\n        <p>\n          This is a TensorFlow.js based web app where users can classify pill images locally\n          or taken with their device's camera. The app uses TensorFlow.js and a pre-trained model\n          converted to the TensorFlow.js format to provide the inference capabilities.\n          This model is saved locally in the browser using IndexedDB. A service worker is also used\n          to provide offline capabilities.\n        </p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\n\n/**\n * This produces a button that will have a loading animation while the isLoading property is true.\n */\nexport default ({\n  isLoading,\n  text,\n  loadingText,\n  className = '',\n  disabled = false,\n  ...props\n}) =>\n  <Button\n    className={`LoadButton ${className}`}\n    disabled={disabled || isLoading}\n    {...props}\n  >\n    {isLoading && <Spinner\n      as=\"span\"\n      animation=\"border\"\n      size=\"sm\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />}{' '}\n    {isLoading ? loadingText : text}\n  </Button>;\n","/* eslint-disable */\n// Theses classes should correspond to the softmax output of your model.\n\nexport const MODEL_CLASSES = {\n  0: 'Amoxicillin',\n  1: 'Aspirin',\n  2: 'Cimetidine',\n  3: 'Paracetamol',\n  4: 'Provigil',\n};\n","export default {\n  API_ENDPOINT: 'http://localhost:5000/api',\n  // API_ENDPOINT: 'https://[YOUR-ROUTE].mybluemix.net/api'\n};\n","import React, { Component, Fragment } from 'react';\nimport {\n  Alert, Button, Collapse, Container, Form, Spinner, ListGroup, Tabs, Tab\n} from 'react-bootstrap';\nimport { FaCamera, FaChevronDown, FaChevronRight } from 'react-icons/fa';\nimport { openDB } from 'idb';\nimport Cropper  from 'react-cropper';\nimport * as tf from '@tensorflow/tfjs';\nimport LoadButton from '../components/LoadButton';\nimport { MODEL_CLASSES } from '../model/classes';\nimport config from '../config';\nimport './Classify.css';\nimport 'cropperjs/dist/cropper.css';\n\n\nconst MODEL_PATH = '/model/model.json';\nconst IMAGE_SIZE = 224;\nconst CANVAS_SIZE = 224;\nconst TOPK_PREDICTIONS = 1;\n\nconst INDEXEDDB_DB = 'tensorflowjs';\nconst INDEXEDDB_STORE = 'model_info_store';\nconst INDEXEDDB_KEY = 'web-model';\n\n/**\n * Class to handle the rendering of the Classify page.\n * @extends React.Component\n */\nexport default class Classify extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.webcam = null;\n    this.model = null;\n    this.modelLastUpdated = null;\n\n    this.state = {\n      modelLoaded: false,\n      filename: '',\n      isModelLoading: false,\n      isClassifying: false,\n      predictions: [],\n      photoSettingsOpen: true,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: false,\n      isDownloadingModel: false\n    };\n  }\n\n  async componentDidMount() {\n    if (('indexedDB' in window)) {\n      try {\n        this.model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY);\n\n        // Safe to assume tensorflowjs database and related object store exists.\n        // Get the date when the model was saved.\n        try {\n          const db = await openDB(INDEXEDDB_DB, 1, );\n          const item = await db.transaction(INDEXEDDB_STORE)\n                               .objectStore(INDEXEDDB_STORE)\n                               .get(INDEXEDDB_KEY);\n          const dateSaved = new Date(item.modelArtifactsInfo.dateSaved);\n          await this.getModelInfo();\n          console.log(this.modelLastUpdated);\n          if (!this.modelLastUpdated  || dateSaved >= new Date(this.modelLastUpdated).getTime()) {\n            console.log('Using saved model');\n          }\n          else {\n            this.setState({\n              modelUpdateAvailable: true,\n              showModelUpdateAlert: true,\n            });\n          }\n\n        }\n        catch (error) {\n          console.warn(error);\n          console.warn('Could not retrieve when model was saved.');\n        }\n\n      }\n      // If error here, assume that the object store doesn't exist and the model currently isn't\n      // saved in IndexedDB.\n      catch (error) {\n        console.log('Not found in IndexedDB. Loading and saving...');\n        console.log(error);\n        this.model = await tf.loadLayersModel(MODEL_PATH);\n        await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n      }\n    }\n    // If no IndexedDB, then just download like normal.\n    else {\n      console.warn('IndexedDB not supported.');\n      this.model = await tf.loadLayersModel(MODEL_PATH);\n    }\n\n    this.setState({ modelLoaded: true });\n    this.initWebcam();\n\n    // Warm up model.\n    let prediction = tf.tidy(() => this.model.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])));\n    prediction.dispose();\n  }\n\n  async componentWillUnmount() {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n\n    // Attempt to dispose of the model.\n    try {\n      this.model.dispose();\n    }\n    catch (e) {\n      // Assume model is not loaded or already disposed.\n    }\n  }\n\n  initWebcam = async () => {\n    try {\n      this.webcam = await tf.data.webcam(\n        this.refs.webcam,\n        {resizeWidth: CANVAS_SIZE, resizeHeight: CANVAS_SIZE, facingMode: 'environment'}\n      );\n    }\n    catch (e) {\n      this.refs.noWebcam.style.display = 'block';\n    }\n  }\n\n  startWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.start();\n    }\n  }\n\n  stopWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n  }\n\n  getModelInfo = async () => {\n    await fetch(`${config.API_ENDPOINT}/model_info`, {\n      method: 'GET',\n    })\n    .then(async (response) => {\n      await response.json().then((data) => {\n        this.modelLastUpdated = data.last_updated;\n      })\n      .catch((err) => {\n        console.log('Unable to get parse model info.');\n      });\n    })\n    .catch((err) => {\n      console.log('Unable to get model info');\n    });\n  }\n\n  updateModel = async () => {\n    // Get the latest model from the server and refresh the one saved in IndexedDB.\n    console.log('Updating the model: ' + INDEXEDDB_KEY);\n    this.setState({ isDownloadingModel: true });\n    this.model = await tf.loadLayersModel(MODEL_PATH);\n    await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n    this.setState({\n      isDownloadingModel: false,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: true\n    });\n  }\n\n  classifyLocalImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const croppedCanvas = this.refs.cropper.getCroppedCanvas();\n    const image = tf.tidy( () => tf.browser.fromPixels(croppedCanvas).toFloat());\n\n    // Process and resize image before passing in to model.\n    const imageData = await this.processImage(image);\n    const resizedImage = tf.image.resizeBilinear(imageData, [IMAGE_SIZE, IMAGE_SIZE]);\n\n    const logits = this.model.predict(resizedImage);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const context = this.refs.canvas.getContext('2d');\n    const ratioX = CANVAS_SIZE / croppedCanvas.width;\n    const ratioY = CANVAS_SIZE / croppedCanvas.height;\n    const ratio = Math.min(ratioX, ratioY);\n    context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n    context.drawImage(croppedCanvas, 0, 0,\n                      croppedCanvas.width * ratio, croppedCanvas.height * ratio);\n\n    // Dispose of tensors we are finished with.\n    image.dispose();\n    imageData.dispose();\n    resizedImage.dispose();\n    logits.dispose();\n  }\n\n  classifyWebcamImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const imageCapture = await this.webcam.capture();\n\n    const resized = tf.image.resizeBilinear(imageCapture, [IMAGE_SIZE, IMAGE_SIZE]);\n    const imageData = await this.processImage(resized);\n    const logits = this.model.predict(imageData);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const tensorData = tf.tidy(() => imageCapture.toFloat().div(255));\n    await tf.browser.toPixels(tensorData, this.refs.canvas);\n\n    // Dispose of tensors we are finished with.\n    resized.dispose();\n    imageCapture.dispose();\n    imageData.dispose();\n    logits.dispose();\n    tensorData.dispose();\n  }\n\n  processImage = async (image) => {\n    return tf.tidy(() => image.expandDims(0).toFloat().div(127).sub(1));\n  }\n\n  /**\n   * Computes the probabilities of the topK classes given logits by computing\n   * softmax to get probabilities and then sorting the probabilities.\n   * @param logits Tensor representing the logits from MobileNet.\n   * @param topK The number of top predictions to show.\n   */\n  getTopKClasses = async (values, topK) => {\n    const valuesAndIndices = [];\n    for (let i = 0; i < values.length; i++) {\n      valuesAndIndices.push({value: values[i], index: i});\n    }\n    valuesAndIndices.sort((a, b) => {\n      return b.value - a.value;\n    });\n    const topkValues = new Float32Array(topK);\n    const topkIndices = new Int32Array(topK);\n    for (let i = 0; i < topK; i++) {\n      topkValues[i] = valuesAndIndices[i].value;\n      topkIndices[i] = valuesAndIndices[i].index;\n    }\n\n    const topClassesAndProbs = [];\n    for (let i = 0; i < topkIndices.length; i++) {\n      topClassesAndProbs.push({\n        className: MODEL_CLASSES[topkIndices[i]],\n        probability: (topkValues[i] * 100).toFixed(2)\n      });\n    }\n    return topClassesAndProbs;\n  }\n\n  handlePanelClick = event => {\n    this.setState({ photoSettingsOpen: !this.state.photoSettingsOpen });\n  }\n\n  handleFileChange = event => {\n    if (event.target.files && event.target.files.length > 0) {\n      this.setState({\n        file: URL.createObjectURL(event.target.files[0]),\n        filename: event.target.files[0].name\n      });\n    }\n  }\n\n  handleTabSelect = activeKey => {\n    switch(activeKey) {\n      case 'camera':\n        this.startWebcam();\n        break;\n      case 'localfile':\n        this.setState({filename: null, file: null});\n        this.stopWebcam();\n        break;\n      default:\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Classify container\">\n\n      { !this.state.modelLoaded &&\n        <Fragment>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          {' '}<span className=\"loading-model-text\">Loading Model</span>\n        </Fragment>\n      }\n\n      { this.state.modelLoaded &&\n        <Fragment>\n        <Button\n          onClick={this.handlePanelClick}\n          className=\"classify-panel-header\"\n          aria-controls=\"photo-selection-pane\"\n          aria-expanded={this.state.photoSettingsOpen}\n          >\n          Take or Select a Photo to Classify\n            <span className='panel-arrow'>\n            { this.state.photoSettingsOpen\n              ? <FaChevronDown />\n              : <FaChevronRight />\n            }\n            </span>\n          </Button>\n          <Collapse in={this.state.photoSettingsOpen}>\n            <div id=\"photo-selection-pane\">\n            { this.state.modelUpdateAvailable && this.state.showModelUpdateAlert &&\n                <Container>\n                  <Alert\n                    variant=\"info\"\n                    show={this.state.modelUpdateAvailable && this.state.showModelUpdateAlert}\n                    onClose={() => this.setState({ showModelUpdateAlert: false})}\n                    dismissible>\n                      An update for the <strong>{this.state.modelType}</strong> model is available.\n                      <div className=\"d-flex justify-content-center pt-1\">\n                        {!this.state.isDownloadingModel &&\n                          <Button onClick={this.updateModel}\n                                  variant=\"outline-info\">\n                            Update\n                          </Button>\n                        }\n                        {this.state.isDownloadingModel &&\n                          <div>\n                            <Spinner animation=\"border\" role=\"status\" size=\"sm\">\n                              <span className=\"sr-only\">Downloading...</span>\n                            </Spinner>\n                            {' '}<strong>Downloading...</strong>\n                          </div>\n                        }\n                      </div>\n                  </Alert>\n                </Container>\n              }\n              {this.state.showModelUpdateSuccess &&\n                <Container>\n                  <Alert variant=\"success\"\n                         onClose={() => this.setState({ showModelUpdateSuccess: false})}\n                         dismissible>\n                    The <strong>{this.state.modelType}</strong> model has been updated!\n                  </Alert>\n                </Container>\n              }\n            <Tabs defaultActiveKey=\"camera\" id=\"input-options\" onSelect={this.handleTabSelect}\n                  className=\"justify-content-center\">\n              <Tab eventKey=\"camera\" title=\"Take Photo\">\n                <div id=\"no-webcam\" ref=\"noWebcam\">\n                  <span className=\"camera-icon\"><FaCamera /></span>\n                  No camera found. <br />\n                  Please use a device with a camera, or upload an image instead.\n                </div>\n                <div className=\"webcam-box-outer\">\n                  <div className=\"webcam-box-inner\">\n                    <video ref=\"webcam\" autoPlay playsInline muted id=\"webcam\"\n                           width=\"448\" height=\"448\">\n                    </video>\n                  </div>\n                </div>\n                <div className=\"button-container\">\n                  <LoadButton\n                    variant=\"primary\"\n                    size=\"lg\"\n                    onClick={this.classifyWebcamImage}\n                    isLoading={this.state.isClassifying}\n                    text=\"Classify\"\n                    loadingText=\"Classifying...\"\n                  />\n                </div>\n              </Tab>\n              <Tab eventKey=\"localfile\" title=\"Select Local File\">\n                <Form.Group controlId=\"file\">\n                  <Form.Label>Select Image File</Form.Label><br />\n                  <Form.Label className=\"imagelabel\">\n                    {this.state.filename ? this.state.filename : 'Browse...'}\n                  </Form.Label>\n                  <Form.Control\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"imagefile\" />\n                </Form.Group>\n                { this.state.file &&\n                  <Fragment>\n                    <div id=\"local-image\">\n                      <Cropper\n                        ref=\"cropper\"\n                        src={this.state.file}\n                        style={{height: 400, width: '100%'}}\n                        guides={true}\n                        aspectRatio={1 / 1}\n                        viewMode={2}\n                      />\n                    </div>\n                    <div className=\"button-container\">\n                      <LoadButton\n                        variant=\"primary\"\n                        size=\"lg\"\n                        disabled={!this.state.filename}\n                        onClick={this.classifyLocalImage}\n                        isLoading={this.state.isClassifying}\n                        text=\"Classify\"\n                        loadingText=\"Classifying...\"\n                      />\n                    </div>\n                  </Fragment>\n                }\n              </Tab>\n            </Tabs>\n            </div>\n          </Collapse>\n          { this.state.predictions.length > 0 &&\n            <div className=\"classification-results\">\n              <h3>Predictions</h3>\n              <canvas ref=\"canvas\" width={CANVAS_SIZE} height={CANVAS_SIZE} />\n              <br />\n              <ListGroup>\n              {this.state.predictions.map((category) => {\n                  return (\n                    <ListGroup.Item key={category.className}>\n                      <strong>{category.className}</strong> {category.probability}%</ListGroup.Item>\n                  );\n              })}\n              </ListGroup>\n            </div>\n          }\n          </Fragment>\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './NotFound.css';\n\n/**\n * This is rendered when a route is not found (404).\n */\nexport default () =>\n  <div className=\"NotFound\">\n    <h1>404</h1>\n    <h3>The page you were looking for is not here.</h3>\n    <a href=\"/\">Go Home</a>\n  </div>;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport About from './pages/About';\nimport Classify from './pages/Classify';\nimport NotFound from './pages/NotFound';\n\nexport default ({ childProps }) =>\n  <Switch>\n    <Route path=\"/\" exact component={Classify} props={childProps} />\n    <Route path=\"/about\" exact component={About} props={childProps} />\n    <Route component={NotFound} />\n  </Switch>;\n","import { PropTypes } from 'prop-types';\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Container, Nav, Navbar } from 'react-bootstrap';\nimport AlertDismissable from './components/AlertDismissable';\nimport Routes from './Routes';\nimport './App.css';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    const reloadMsg = `\n      New content is available.<br />\n      Please <a href='javascript:location.reload();'>reload</a>.<br />\n      <small>If reloading doesn't work, close all tabs/windows of this web application,\n      and then reopen the application.</small>\n    `;\n    this.state = {\n      showUpdateAlert: true,\n      reloadMsg: reloadMsg\n    };\n  }\n\n  dismissUpdateAlert = event => {\n    this.setState({ showUpdateAlert: false });\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Container>\n            <Navbar collapseOnSelect className=\"app-nav-bar\" variant=\"dark\" expand=\"lg\">\n              <Navbar.Brand href=\"/\">Pic2Pill</Navbar.Brand>\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n              <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"\">\n                  <Link className=\"nav-link\" to=\"/\">Classify</Link>\n                  <Link className=\"nav-link\" to=\"/about\">About</Link>\n                </Nav>\n              </Navbar.Collapse>\n            </Navbar>\n            { this.props.updateAvailable && this.state.showUpdateAlert &&\n              <div style={{paddingTop: '10px'}}>\n                <AlertDismissable\n                  title=\"\"\n                  variant=\"info\"\n                  message={this.state.reloadMsg}\n                  show={this.props.updateAvailable && this.state.showUpdateAlert}\n                  onClose={this.dismissUpdateAlert} />\n              </div>\n            }\n          </Container>\n          <Container>\n            <Routes />\n          </Container>\n        </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  updateAvailable: PropTypes.bool.isRequired,\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // A new service worker has previously finished installing, and is now waiting.\n      if (registration.waiting && registration.active) {\n        newerSwAvailable(registration.waiting);\n      }\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              newerSwAvailable(installingWorker);\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n      function newerSwAvailable(sw){\n        // At this point, the updated precached content has been fetched,\n        // but the previous service worker will still serve the older\n        // content until all client tabs are closed.\n        console.log(\n          'New content is available and will be used when all ' +\n            'tabs for this page are closed. See http://bit.ly/CRA2-PWA.'\n        );\n        if (config && config.onUpdate) {\n          config.onUpdate(registration, sw);\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nclass Index extends Component {\n  state = {\n    contentCached: false,\n    updateAvailable: false,\n  };\n\n  componentDidMount() {\n    const config = {\n      onUpdate: this.handleUpdate,\n    };\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.register(config);\n  }\n\n  render() {\n    return (\n      <Router>\n        <App updateAvailable={this.state.updateAvailable} />\n      </Router>\n    );\n  }\n\n  handleUpdate = (registration) => {\n    const waitingServiceWorker = registration.waiting;\n\n    if (waitingServiceWorker) {\n      waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\n    }\n    this.setState({ updateAvailable: true});\n  }\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n"],"sourceRoot":""}